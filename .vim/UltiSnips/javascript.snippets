# Loops

snippet for "for loop" !
for (let ${1:i} = 0, len = ${2:array}.length; $1 < len; $1++) {
	$0${2/([^.]+).*/$1/}[$1]
}
endsnippet

snippet fori "for...in" b
for (let ${1:prop} in ${2:Things}) {
	if ($2.hasOwnProperty($1))) {
		${0:var ${3:value} = $2[$1];}
	}
}
endsnippet

snippet foro "for...of" b
for (let ${1:value} of ${2:Things}) {
	${0:${VISUAL}}
}
endsnippet


# Conditionals

snippet if "if" b
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet el "else"
else {
	${0:${VISUAL}}
}
endsnippet

snippet eif "else if" !
else if (${1}) {
	${0:${VISUAL}}
}
endsnippet


# Switches

snippet sw "switch" b
switch (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet case "case" b
case ${1}:
	${0:${VISUAL}}
	break;
endsnippet


# Function

snippet fun "function with dynamic docblock" b
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
def formatTag(argument):
	return " * @param {{}} {0}".format(argument)

arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
	tags = map(formatTag, arguments)
	snip.rv = "/**"
	for tag in tags:
		snip += tag
	snip += ' */'
	snip += ''
else:
	snip.rv = ''
`${1}: function(${2}) {
	${0:${VISUAL}}
},
endsnippet


# JSDoc

snippet /**
/**
 * ${0:${VISUAL}}
 */
endsnippet

snippet @par "@param {...}"
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret "@return {...}"
@return {${1:type}} ${0:description}
endsnippet


# Misc

snippet cl "console.log(...)" b
console.log($0);
endsnippet

snippet req "require"
require('${1}')${2:,}$0
endsnippet

snippet me "module.exports"
module.exports = $0
endsnippet
