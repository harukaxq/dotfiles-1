{
  // Disable formatOnSave for TS/JS since ESLint takes care of this
  "[javascript]": {
    "editor.formatOnSave": false
  },
  "[javascriptreact]": {
    "editor.formatOnSave": false
  },
  "[typescript]": {
    "editor.formatOnSave": false
  },
  "[typescriptreact]": {
    "editor.formatOnSave": false
  },

  "breadcrumbs.enabled": true,
  "breadcrumbs.symbolPath": "off",

  "diffEditor.renderSideBySide": true,

  "editor.accessibilitySupport": "off",

  // Prevent typing things like `.` and `;` from accepting autocomplete suggestions
  "editor.acceptSuggestionOnCommitCharacter": false,

  "editor.autoClosingBrackets": "never",

  "editor.autoClosingQuotes": "never",

  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },

  "editor.renderControlCharacters": false,
  // TODO: render trailing whitespace?
  "editor.renderWhitespace": "none",

  "editor.rulers": [
    100,
  ],
  "editor.fontFamily": "Source Code Pro",
  "editor.fontSize": 16,
  "editor.fontWeight": "400",

  "editor.minimap.enabled": false,

  "editor.renderIndentGuides": false,

  // Make pressing tab fast for running snippets
  "editor.tabCompletion": "onlySnippets",

  "editor.tabSize": 2,

  "editor.tokenColorCustomizations": {
    "textMateRules": [
      {
        // Italic comments
        "scope": "comment",
        "settings": {
          "fontStyle": "italic"
        }
      }
    ]
  },

  "editor.wordWrap": "on",

  // The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade,
  // slim, xml, xsl, css, scss, sass, less and stylus.
  "emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly",

  "eslint.enable": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
  ],

  "extensions.ignoreRecommendations": false,

  "files.associations": {
    "*.html": "html"
  },
  "files.insertFinalNewline": true,
  "files.trimTrailingWhitespace": true,

  "git.enabled": true,

  "search.exclude": {
    "**/bower_components": true,
    "**/node_modules": true,
    "**/tmp": true
  },
  "search.location": "panel",
  "search.useReplacePreview": false,

  "terminal.integrated.fontFamily": "Source Code Pro",
  "terminal.integrated.fontWeight": "400",
  "terminal.integrated.fontSize": 16,
  "terminal.integrated.scrollback": 4000,

  "typescript.disableAutomaticTypeAcquisition": true,

  "yaml.validate": true,

  "vim.hlsearch": true,
  "vim.leader": "<space>",
  "vim.insertModeKeyBindings": [
    // Easy escape to normal mode
    {
      "before": [
        "j",
        "j",
      ],
      "after": [
        "<Esc>",
      ],
    },
  ],

  "vim.normalModeKeyBindingsNonRecursive": [
    // gf is broken, so use gd instead
    {
      "before": [
        "g",
        "f",
      ],
      "after": [
        "g",
        "d",
      ],
    },

    // Toggle buffer
    {
      "before": [
        "<leader>",
        "<leader>",
      ],
      "commands": [
        {
          "command": "workbench.action.openPreviousEditorFromHistory",
        },
        {
          "command": "workbench.action.acceptSelectedQuickOpenItem",
        }
      ]
    },

    // Easy save
    {
      "before": [
        "<leader>",
        "w",
      ],
      "commands": [
        {
          "command": "workbench.action.files.save",
        },
      ],
    },

    // Command-T
    {
      "before": [
        "<leader>",
        "t",
      ],
      "commands": [
        {
          "command": "workbench.action.quickOpen",
        },
      ],
    },

    // Join lines with comments
    {
      "before": ["J"],
      "after": [],
      "commands": [
        {
          "command": "joinCommentAware.join",
          "args": []
        }
      ]
    },

    // vim-vinegar
    {
      "before": ["-"],
      "commands": [
        {
          "command": "breadcrumbs.toggleToOn",
          "when": "!config.breadcrumbs.enabled",
        },
        {
          "command": "breadcrumbs.focusAndSelect",
          "when": "breadcrumbsPossible",
        },
      ],
    },
  ],

  /*
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": [
        "<tab>",
      ],
      "commands": [
        {
          "command": "editor.action.insertSnippet",
        }
      ]
    }
  ],
  */

  "window.title": "${rootName}${separator}${activeEditorLong}",
  "window.zoomLevel": 0,

  "workbench.activityBar.visible": false,
  "workbench.colorTheme": "Monokai",
  "workbench.editor.showTabs": false,
  "workbench.panel.defaultLocation": "right",
  "workbench.settings.editor": "json",
}
